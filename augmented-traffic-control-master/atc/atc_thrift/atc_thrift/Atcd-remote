#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from atc_thrift import Atcd
from atc_thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  TrafficControlRc startShaping(TrafficControl tc)'
  print '  TrafficControlRc stopShaping(TrafficControlledDevice device)'
  print '  TrafficControl getCurrentShaping(TrafficControlledDevice device)'
  print '  bool isShaped(TrafficControlledDevice device)'
  print '  PacketCapture startPacketCapture(TrafficControlledDevice device, i32 timeout)'
  print '  PacketCapture stopPacketCapture(TrafficControlledDevice device)'
  print '  void stopAllPacketCaptures()'
  print '   listPacketCaptures(TrafficControlledDevice device)'
  print '   listRunningPacketCaptures()'
  print '  i32 getShapedDeviceCount()'
  print '  AccessToken requestToken(string ip, i32 duration)'
  print '  bool requestRemoteControl(TrafficControlledDevice device, AccessToken accessToken)'
  print '   getDevicesControlledBy(string ip)'
  print '   getDevicesControlling(string ip)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Atcd.Client(protocol)
transport.open()

if cmd == 'startShaping':
  if len(args) != 1:
    print 'startShaping requires 1 args'
    sys.exit(1)
  pp.pprint(client.startShaping(eval(args[0]),))

elif cmd == 'stopShaping':
  if len(args) != 1:
    print 'stopShaping requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopShaping(eval(args[0]),))

elif cmd == 'getCurrentShaping':
  if len(args) != 1:
    print 'getCurrentShaping requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCurrentShaping(eval(args[0]),))

elif cmd == 'isShaped':
  if len(args) != 1:
    print 'isShaped requires 1 args'
    sys.exit(1)
  pp.pprint(client.isShaped(eval(args[0]),))

elif cmd == 'startPacketCapture':
  if len(args) != 2:
    print 'startPacketCapture requires 2 args'
    sys.exit(1)
  pp.pprint(client.startPacketCapture(eval(args[0]),eval(args[1]),))

elif cmd == 'stopPacketCapture':
  if len(args) != 1:
    print 'stopPacketCapture requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopPacketCapture(eval(args[0]),))

elif cmd == 'stopAllPacketCaptures':
  if len(args) != 0:
    print 'stopAllPacketCaptures requires 0 args'
    sys.exit(1)
  pp.pprint(client.stopAllPacketCaptures())

elif cmd == 'listPacketCaptures':
  if len(args) != 1:
    print 'listPacketCaptures requires 1 args'
    sys.exit(1)
  pp.pprint(client.listPacketCaptures(eval(args[0]),))

elif cmd == 'listRunningPacketCaptures':
  if len(args) != 0:
    print 'listRunningPacketCaptures requires 0 args'
    sys.exit(1)
  pp.pprint(client.listRunningPacketCaptures())

elif cmd == 'getShapedDeviceCount':
  if len(args) != 0:
    print 'getShapedDeviceCount requires 0 args'
    sys.exit(1)
  pp.pprint(client.getShapedDeviceCount())

elif cmd == 'requestToken':
  if len(args) != 2:
    print 'requestToken requires 2 args'
    sys.exit(1)
  pp.pprint(client.requestToken(args[0],eval(args[1]),))

elif cmd == 'requestRemoteControl':
  if len(args) != 2:
    print 'requestRemoteControl requires 2 args'
    sys.exit(1)
  pp.pprint(client.requestRemoteControl(eval(args[0]),eval(args[1]),))

elif cmd == 'getDevicesControlledBy':
  if len(args) != 1:
    print 'getDevicesControlledBy requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDevicesControlledBy(args[0],))

elif cmd == 'getDevicesControlling':
  if len(args) != 1:
    print 'getDevicesControlling requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDevicesControlling(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
